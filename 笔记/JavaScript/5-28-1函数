[TOC]



#### 函数

用==function==来声明函数

**方法1语法：**

```js
function 函数名() { 
    
}
```

**方法2语法：**

```js
var 变量名 = function() {
    //注意，这个变量名并不是函数名，所以这个函数是匿名的
    //可以理解为是指向函数的指针
}
```

方法1例子

```js
function sayName(isName) {
    document.write(isName+'你好');
}

sayName('一西');
```

```
一西你好
```

方法2例子

```js
var fn = function(){
    document.write('你好');
};
fn();
```

+ fn是变量名，不是函数名
+ 函数表达式也可以传递参数
+ 但是如果存在函数调用在函数上面时，方法一可以，方法二不行

#### 函数的形参实参个数匹配问题

在java中，要求形参实参个数必须匹配，而js不一样，js会将实参一一对应形参，多出来的实参就丢弃了

**例子——实参多于形参**

```js
function sayName(num1,num2) {
    document.write(num1+num2);
}
sayName(1,2,3);
```

```
3//实参3不参与运算
```

**例子——形参多于实参**

形参可以看做是不用声明的变量，所以num2是变量，但没赋值，所以值为undefined

```js
function sayName(num1,num2) {
    document.write(num1+num2);
}
sayName(1);
```

```
NaN
```



#### return

```js
function sayName(num1,num2) {
    return num1+num2;
}
document.write(sayName(1,2));
```

```
3
```

##### 注意事项

+ 函数遇到return就会终止函数
+ ==return只能返回一个值==，如果多个值用逗号隔开，以最后一个为准
+ 没有return语句则返回值为==undefined==



#### arguments

当不确定有多少个参数传递时，可以用arguments来获取。arguments是当前函数的一个内置对象，里面存储了传递的所有实参

```js
function fn() {
    console.log(arguments);
    document.write(arguments);
}
fn(1,2,3);
```

```
[object Arguments]//这里是document.write(arguments);的输出结果
```

==arguments==展示形式是一个==伪数组==，因此可以进行遍历。伪数组具有以下特点：

+ 具有length属性
+ 按索引存储数据
+ 不具有数组的push，pop方法

例子

```js
function fn() {
    for (var i = 0; i < arguments.length; i++) {
        document.write(arguments[i]);
    }
}
fn(1,2,3);
```

```
123
```

##### 翻转数组

```js
function fn() {
    var a = [];
    //a = arguments;
    var x = arguments.length-1;
    var j = 0;
    for (var i = x;i >= 0; i--) {
        a[j] = arguments[i];
        j++;
    }
    for (var k = 0; k < a.length; k++) {
        document.write(a[k]);
    }
}
fn(1,2,3,4,5,6,7,8,9);
```

```
987654321
```

当代码3没被注释时，结果为987656789，所以可以看出，js中==数组的赋值是传地址的==，也就是当执行a = arguments时，它们指向的是同一块内存空间



#### 函数的调用

```javascript
function fn1() {
    document.write('我是函数1');
    fn2();
}

function fn2() {
    document.write('我是函数2');
}

//此处运行fn1
fn1();
```

```
我是函数1我是函数2
```



#### 作用域

在js里面就是全局作用域，在函数里面就是局部作用域

根据作用域的不同，变量就分为全局变量跟局部变量

```js
var num = 10;//全局变量
function fn() {
    var num = 20;//局部变量
    document.write(num);
}
document.write(num);
fn();
```

```
1020
```

+ 全局变量当浏览器关闭时才回销毁，比较占用内存资源
+ 局部变量在程序执行完毕就会销毁，比较节约内存资源



##### 全局变量

在全局作用域下声明的变量叫做全局变量

+ 全局变量在代码的任何位置都可以使用
+ 在全局作用域下用var声明的变量就是全局变量
+ 特殊情况下，在函数内部不使用var声明的变量也是全局变量（不建议使用）



##### 块级作用域

现阶段js是没有块级作用域的，js里在es6时才新增的块作用域，块级作用域是包含在{}里的，比如if语句，for语句等里面的作用域就叫做块级作用域

```js
if (true) {
    var num = 10;
}
document.write(num);//在块级作用域外可以访问到里面的变量num
```

```
10
```



##### 作用域链

内部作用域可以访问外部作用域，比如局部作用域跟全局作用域，而函数的嵌套中，内部函数可以访问外部函数的变量，当一个外部函数嵌套一个内部函数，此时外部函数跟全局作用域存在相同的变量名时，内部函数优先访问外部函数的变量，如果外部函数没有这个变量，会再往上查找，这就是作用域链

```js
var num = 10;//全局变量
function fn1() {
    var num = 20;//存在于外部函数的局部变量
    function fn2() {
        document.write(num);
    }
    fn2();
}
fn1();
```

```
20
```

