[TOC]



#### 浮点数

浮点数的最高精度是17位小数，但在进行算数计算时其精度远远不如整数

```js
document.write(0.1 + 0.2);//0.30000000000000004
document.write(0.07 * 100);//7.000000000000001

var num1 = 7;
var num2 = 0.07 * 100//7.000000000000001
document.write(num1 == num2);//结果为false
```

**注意：**==不要直接判断两个浮点数是否相等==



#### 自增自减运算符

与c++跟java相同，js支持自增自减，比如

```js
var num1 = 7;
--num1;
document.write(num1);//结果为6
```

**a++,先返回原值再自增**

```js
var num1 = 7;
num1++;
document.write(num1);//结果为8

===================与++a不同之处================
var num1 = 7;
document.write(num1++);//结果为7
```



**++a,先自增再返回原值**

```js
var num1 = 7;
++num1;
document.write(num1);//结果为8

===================与a++不同之处================
var num1 = 7;
document.write(++num1);//结果为8
```



#### 比较运算符

##### 等于==

```js
document.write('55' == 55);//结果为true
//不等于则为         !=
```

**因为==会把字符串型的数据转为数字型**

**不等于则为         !=**



##### 全等于===

要求==值==和==数据类型==都一样，即上述情况不会再发生

```js
document.write('55' === 55);//结果为false
```

**不全等于则为     ===**



#### 逻辑运算符

+ 与&&
+ 或||
+ 非!

```js
document.write(1 || 1<2);//结果为1
document.write(1 < 2 || 1);//结果为true
document.write(1 > 2|| 1 < 2);//结果为true

document.write(1 > 2 && 1 < 2);//结果为false
document.write(1 && 1 < 2);//结果为true
document.write(1 && 2);//结果为2
```

**总结1：**逻辑运算符两边不一定都要表达式，因为在布尔值里，除了一些特殊值其余都为true，而与跟或，前者是全真为真，一假即假，后者是全假为假，一真即真，

&&先判断前者，如果为真再判断后者，确保都为真，然后输出后者，比如代码第6行7行，但是如果前者为假，就不再判断后者了，因为整个表达式都为假了，所以只输出前者

而||会区分情况，前者为真不再往下，前者为假再判断后者，所以它也只会输出一次，前者为真就输出前者就好了，比如代码第1行2行，前者为假就再判断后者，后者为真就只输出后者，比如代码第3行

**总结2：**上面的文字有更简单的说法

**与&&：**

+ 表达式1为真，则返回表达式2
+ 表达式1为假，则返回表达式1

**或||**

+ 表达式1为真，则返回表达式1
+ 表达式1为假，则返回表达式2



##### 短路求值

同总结处，与或非在符号左边值的真假情况不同时有不一样的情况，在求真假时不会影响，但是如果其中是运算符的话就会有影响

**与&&**

```js
var num = 1;
1 && (++num);//前者为真，需要再判断后者是否为真，所以运行了++num
document.write(num);//结果为2

var num = 1;
0 && (++num);//前者为假，不再判断运算符右边
document.write(num);//结果为1
```



**或||**

```js
var num = 1;
1 || (++num);//前者为真，不再判断后者，所以++num没有运行
document.write(num);//结果为1

var num = 1;
0 || (++num);//前者为假，再判断后者是否为假，所以执行了++num
document.write(num);//结果为2
```



#### 赋值运算符

在js中可以+=赋值



#### 运算符优先级

| 优先级 | 运算符     | 顺序                   |
| ------ | ---------- | ---------------------- |
| 1      | 小括号     | ()                     |
| 2      | 一元运算符 | ++  --  !              |
| 3      | 算术运算符 | 先* / % 后 + -         |
| 4      | 关系运算符 | >  >=  >  >=           |
| 5      | 相等运算符 | ==  !=  ===  !等于等于 |
| 6      | 逻辑运算符 | 先&&  后\|\|           |
| 7      | 赋值运算符 | =                      |
| 8      | 逗号运算符 | ,                      |

