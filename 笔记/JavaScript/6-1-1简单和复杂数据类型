

#### 简单数据类型与复杂数据类型

##### 简单数据类型

+ 简单数据类型又叫基本数据类型或者值类型，因为存储时变量中存储的是值本身，所以叫值类型

+ string、number、boolean、undefined、null

特殊——null：

其他简单数据类型返回的都是本身，比如boolean返回boolean，undefined返回unfinished，但是null返回的是==空对象==

所以，如果有一个变量，打算存储为对象，但是还没想好给什么，可以先赋值为null

##### 复杂数据类型

+ 在存储变量时存储的仅仅是地址（引用），因此又叫做引用数据类型
+ 通过new关键字创建的对象，如对象、数组等



#### 堆和栈

**注意：**JavaScript中没有堆栈的概念，通过堆栈的方式，可以更容易理解代码的一些执行方式。

##### 栈（操作系统）

由操作系统自动分派释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈

==简单数据类型存放到栈里面==

##### 堆（操作系统）

存储复杂类型（对象），一般由程序员分配释放，若程序员不释放，则由垃圾回收机制释放

==复杂数据类型存放到堆里面==



#### 简单数据类型的内存分配

简单数据类型（string、number、boolean、undefined、null）的数据直接存在变量（栈空间）中

#### 复杂数据类型的内存分配

在栈里开辟一个空间存==地址==，然后真正的数据存在堆里面，由地址指向数据，由栈空间指向堆空间



#### 简单数据类型传参

```js
function fn(a) {
    a++;
    document.write(a);
}

var x = 10;
fn(x);
document.write(x)
```

```
11
10
```

![image-20220705142018005](image-20220705142018005.png)



#### 复杂数据类型传参

```js
function Person(name) {
    this.name = name;
}

function f1(x) {
    document.write(x.name+'<br>');//2.这个输出什么
    x.name = '张学友';
    document.write(x.name+'<br>');//3.这个输出什么
}

var p = new Person('刘德华');
document.write(p.name+'<br>');//1.这个输出什么
f1(p);
document.write(p.name);//4.这个输出什么
```

**1.2语句输出**

![image-20220705144913087](image-20220705144913087.png)

**3.4语句输出**

![image-20220705145022523](image-20220705145022523.png)

```
刘德华
刘德华
张学友
张学友
```

